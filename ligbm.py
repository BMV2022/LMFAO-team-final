# -*- coding: utf-8 -*-
"""LIGBM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kV55CmjB6PHiakpNGvGkj8KOrx8G7rt7
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import seaborn as sns
import matplotlib.pyplot as plt

#This work implemented a competition LIGHTGBM for prodicting the breastcancer preidiction
<https://www.kaggle.com/code/jominjae/breasts-cancer-prediction-lr-dt-rf-lgbm-balancing<>


from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
import lightgbm as lgb


import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

n_cpu = os.cpu_count()
n_thread = n_cpu*2
model_rl = LogisticRegression(solver='liblinear')
model_dt = DecisionTreeClassifier()
model_rf = RandomForestClassifier()
model_lgb = lgb.LGBMClassifier(objective='binary')

param_rl = {
    'penalty':['l1','l2'],
    'C':[0.01,0.1,0.5,0.9,1,5,10],
    'tol':[1e-4,1e-2,1,1e2]
}

GSRL1 = GridSearchCV(model_rl, param_rl, cv=5, scoring='accuracy', n_jobs=n_thread)
GSRL1.fit(X_train, y_train)

print('best_param:', GSRL1.best_params_)
print('best_score:', GSRL1.best_score_)


pred_rl1 = GSRL1.predict(X_test)
print(classification_report(y_test, pred_rl1))

fig = plt.figure(figsize=(10,10))
ax = fig.gca()
plot_precision_recall_curve(GSRL1.best_estimator_, X_test, y_test, ax=ax)
plot_precision_recall_curve(GSDT1.best_estimator_, X_test, y_test, ax=ax)
plot_precision_recall_curve(GSRF1.best_estimator_, X_test, y_test, ax=ax)
plot_precision_recall_curve(GS_LGB1.best_estimator_, X_test, y_test, ax=ax)



X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_scaled, test_size=0.25, random_state=1)

GSRL2 = GridSearchCV(model_rl, param_rl, cv=5, scoring='accuracy', n_jobs=n_thread)
GSRL2.fit(X_train, y_train)

print('best_param:', GSRL2.best_params_)
print('best_score:', GSRL2.best_score_)

pred_rl2 = GSRL2.predict(X_test)
print(classification_report(y_test, pred_rl2))

fig = plt.figure(figsize=(10,10))
ax = fig.gca()

pred_lgb2 = GS_LGB2.predict(X_test)
print(classification_report(y_test, pred_lgb2))
plot_precision_recall_curve(GSRL2.best_estimator_, X_test, y_test, ax=ax)
plot_precision_recall_curve(GSDT2.best_estimator_, X_test, y_test, ax=ax)
plot_precision_recall_curve(GSRF2.best_estimator_, X_test, y_test, ax=ax)
plot_precision_recall_curve(GS_LGB2.best_estimator_, X_test, y_test, ax=ax)